// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

enum UserRole {
  USER
  MOD
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  displayName   String?
  email         String?   @unique @ignore
  emailVerified DateTime? @ignore
  image         String?
  role          UserRole  @default(USER)

  accounts   Account[]
  sessions   Session[]
  Image      Image[]
  Nomination Nomination[]
  Nominee    Nominee[]

  @@map("user")
}

enum ImageSize {
  PREVIEW
  SMALL
  MEDIUM
  LARGE
  ORIGINAL
}

model Image {
  id        String   @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  size          ImageSize
  mime          String    @db.VarChar(64)
  imageData     String
  addedBy       User      @relation(fields: [addedByUserId], references: [id])
  addedByUserId String

  @@id([id, size])
  @@map("image")
}

enum AspectRatio {
  ULTRAWIDE
  WIDE
  SQUARE
  TALL
  ULTRATALL
}

model Nomination {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  description  String?
  extras       Json        @default("{}")
  aspectRatio  AspectRatio @default(TALL)
  author       User        @relation(fields: [authorUserId], references: [id])
  authorUserId String
  Nominee      Nominee[]
  priority     Int         @default(0)
  popularity   Int         @default(0)
  tags         Json        @default("[]")

  @@map("nomination")
}

model Nominee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  comment    String?
  position   Int        @default(-1)
  extras     Json       @default("{}")
  nomination Nomination @relation(fields: [nominationId], references: [id])
  author     User       @relation(fields: [authorUserId], references: [id])

  nominationId String
  authorUserId String
  imageId      String

  @@map("nominee")
}
